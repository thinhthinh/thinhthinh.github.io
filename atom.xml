<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thought Schema]]></title>
  <link href="http://thinhthinh.github.io/atom.xml" rel="self"/>
  <link href="http://thinhthinh.github.io/"/>
  <updated>2014-10-29T10:21:50-04:00</updated>
  <id>http://thinhthinh.github.io/</id>
  <author>
    <name><![CDATA[Thinh Vu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Method_Missing: Gone Girl Your Code]]></title>
    <link href="http://thinhthinh.github.io/blog/2014/10/29/method-missing-gone-girl-your-code/"/>
    
    <updated>2014-10-29T07:58:15-04:00</updated>
    <id>http://thinhthinh.github.io/blog/2014/10/29/method-missing-gone-girl-your-code</id>
    
    <content type="html"><![CDATA[<p>Yes, Gone Girl is a verb. To avoid giving anything away, take it to mean to disappear, go absolutely mental, and return to an altered reality. Ruby has something similar: method_missing.</p>

<p style="text-align:center;"><img src="http://media.giphy.com/media/5xtDarmb4oa1Jl01uik/giphy.gif" alt="Gone Girl" /></p>

<p>Wonder how ActiveRecord creates those find methods on the fly? Method_messing. In fact, method_missing is a pillar of metaprogramming and is instrumental in the creation of DSLs.</p>

<p>When a method is called, Ruby looks for the method in the instance methods, class methods, superclass methods, mixins, etc. Method_missing is the <strong>last resort</strong>.</p>

<p>This means right before Ruby throws a NoMethod error, you can catch it with method_missing.</p>

<p>To see how it works, let&rsquo;s see how Active Record&rsquo;s find_by* methods are created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="c1">#1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/^find_by_(.+)$/</span> <span class="c1">#2</span>
</span><span class='line'>      <span class="n">run_find_by_method</span><span class="p">(</span><span class="vg">$1</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="c1">#3</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span> <span class="c1">#4</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Method_missing takes three parameters: the method name, splatted arguments, and then a block to run.</li>
<li>ActiveRecord is converting the method name into a string and then using Regex to match a find_by* pattern.</li>
<li>This is the black box where the find_by* method is actually defined. <strong>When the method is defined, method_missing will no longer be called for that particular method name.</strong></li>
<li>Super allows Ruby to continue doing its thing if the match did not happen.</li>
</ol>


<p>Try it yourself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/pattern_to_match/</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#This defines a class method for future usage.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span> <span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="n">method_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Your magic</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#This runs the newly minted method on your instance.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#To ensure continuity in how Ruby treats methods, </span>
</span><span class='line'><span class="c1">#you override the respond_to method Ruby has </span>
</span><span class='line'><span class="c1">#with a match to your new method.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">include_private</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/^what_is_[\w]+/</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go forth and catch those missing methods. Do not, however, Gone Girl.</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/162832361&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Tap That Class]]></title>
    <link href="http://thinhthinh.github.io/blog/2014/10/15/tap-that-class/"/>
    
    <updated>2014-10-15T00:00:00-04:00</updated>
    <id>http://thinhthinh.github.io/blog/2014/10/15/tap-that-class</id>
    
    <content type="html"><![CDATA[<p>The Tap method reminds me of Nightcrawler, the furry indigo teleporter from the Marvel Universe. He appears out of nowhere, kicks ass, and then disappears in a puff of smoke.</p>

<p style="text-align:center;"><img src="http://24.media.tumblr.com/3ffc21146868e5951dd7e686d4fe9cbe/tumblr_mgr6utyoY31qfhq48o9_r2_250.gif" alt="Nightcrawler teleports" /></p>

<p>The Tap method, born in Ruby >= 1.9, is a helper method that yields a block on your object and returns the object. As a method, it looks like this:</p>

<pre><code>class Object
  def tap
    yield self
    self
  end
end
</code></pre>


<p>This is especially useful when you are creating new classes because it allows you to assign properties from the get-go.</p>

<pre><code>#Creating a new hero object
nightcrawler = Hero.new
nightcrawler.name = "Nightcrawler"
nightcrawler

#Refactored with tap
nightcrawler = Hero.new.tap{|h| name = "Nightcrawler"}
</code></pre>


<p>When you have many properties to set, this allows you to group all methods in an easy-to-read tap block.</p>

<pre><code>nightcrawler = Hero.new.tap do |h|
  h.name = "Nightcrawler"
  h.power = "teleportation"
  h.train_under_xavier
  h.runaway
  h.redemption
  h.anything_else_you_want
end
</code></pre>


<p>Refactoring with tap can aid in readability. However, overdoing it with the tap blocks may result in the opposite. With great power, comes great responsibility.</p>

<p>Superpowers in mind, here&rsquo;s the latest track from UK electro-duo Alunageorge. Goodbye for now.</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/170305212&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://thinhthinh.github.io/blog/2014/09/30/my-first-post-on-octopress/"/>
    
    <updated>2014-09-30T18:25:37-04:00</updated>
    <id>http://thinhthinh.github.io/blog/2014/09/30/my-first-post-on-octopress</id>
    
    <content type="html"><![CDATA[<p>Hello world. This is going to be life-changing.</p>
]]></content>
    
  </entry>
  
</feed>